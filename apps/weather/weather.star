"""
Applet: Weather
Summary: Weather forecast
Description: Weather forecasts for your location.
Authors: JeffLac, RichardD012 (Recreation of Tidbyt Original)

"""

load("encoding/base64.star", "base64")
load("encoding/json.star", "json")
load("http.star", "http")
load("render.star", "render")
load("schema.star", "schema")
load("time.star", "time")

DEFAULT_LOCATION = """
{
	"lat": "40.6781784",
	"lng": "-73.9441579",
	"description": "Brooklyn, NY, USA",
	"locality": "Brooklyn",
	"place_id": "ChIJCSF8lBZEwokRhngABHRcdoI",
	"timezone": "America/New_York"
}
"""

DEFAULT_CACHE_MINS = 5

LANGUAGE_LOCALES = {
    "MON": {
        "de": "MON",
        "en": "MON",
    },
    "TUE": {
        "de": "DIE",
        "en": "TUE",
    },
    "WED": {
        "de": "MIT",
        "en": "WED",
    },
    "THU": {
        "de": "DON",
        "en": "THU",
    },
    "FRI": {
        "de": "FRE",
        "en": "FRI",
    },
    "SAT": {
        "de": "SAM",
        "en": "SAT",
    },
    "SUN": {
        "de": "SON",
        "en": "SUN",
    },
}

WEATHER_FULL_IMAGE = {
    "Thunderstorm": "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKcGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4xLWMwMDMgNzkuOTY5MGE4N2ZjLCAyMDI1LzAzLzA2LTIwOjUwOjE2ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIiB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjYuOCAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjUtMDctMzBUMDk6NDQ6MzMtMDY6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDI1LTA4LTA3VDA5OjU3OjM0LTA2OjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDI1LTA4LTA3VDA5OjU3OjM0LTA2OjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDphNWNhOTIzYS1mZDBjLTQ4NTctOGQ4YS1hZmFhMzM5ZWYwZTQiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDoyZDQ3ZGMwOS1mYTkzLTdkNGItOWM3Ny1kNTBhZmFkZmViNzgiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpiN2I4YzYzMi1mNDE4LTQ4OTctOGFlZi1hZDY0YWYzZGEyZDgiIHRpZmY6T3JpZW50YXRpb249IjEiIHRpZmY6WFJlc29sdXRpb249IjcyMDAwMC8xMDAwMCIgdGlmZjpZUmVzb2x1dGlvbj0iNzIwMDAwLzEwMDAwIiB0aWZmOlJlc29sdXRpb25Vbml0PSIyIiBleGlmOkNvbG9yU3BhY2U9IjY1NTM1IiBleGlmOlBpeGVsWERpbWVuc2lvbj0iNjQiIGV4aWY6UGl4ZWxZRGltZW5zaW9uPSIzMiI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4IiBzdEV2dDp3aGVuPSIyMDI1LTA3LTMwVDA5OjQ0OjMzLTA2OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjYuOCAoTWFjaW50b3NoKSIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6OTRlZmE2NmMtMDRkOS00MDlmLWE2MjItNTQ1ZmUxMmY3NzNlIiBzdEV2dDp3aGVuPSIyMDI1LTA3LTMwVDE3OjA1OjM1LTA2OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjYuOCAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6MTY2YjA2MWItNjRjNy00ZmE5LThlNGUtZjRhOGMyY2VlMjdlIiBzdEV2dDp3aGVuPSIyMDI1LTA4LTA3VDA5OjU3OjM0LTA2OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjYuOCAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY29udmVydGVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJmcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJkZXJpdmVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJjb252ZXJ0ZWQgZnJvbSBhcHBsaWNhdGlvbi92bmQuYWRvYmUucGhvdG9zaG9wIHRvIGltYWdlL3BuZyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YTVjYTkyM2EtZmQwYy00ODU3LThkOGEtYWZhYTMzOWVmMGU0IiBzdEV2dDp3aGVuPSIyMDI1LTA4LTA3VDA5OjU3OjM0LTA2OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjYuOCAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6MTY2YjA2MWItNjRjNy00ZmE5LThlNGUtZjRhOGMyY2VlMjdlIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOmI3YjhjNjMyLWY0MTgtNDg5Ny04YWVmLWFkNjRhZjNkYTJkOCIgc3RSZWY6b3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmI3YjhjNjMyLWY0MTgtNDg5Ny04YWVmLWFkNjRhZjNkYTJkOCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRG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",
    "Clear": "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKcGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4xLWMwMDMgNzkuOTY5MGE4N2ZjLCAyMDI1LzAzLzA2LTIwOjUwOjE2ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIiB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjYuOCAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjUtMDctMzBUMDk6NDQ6MzMtMDY6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDI1LTA4LTA3VDA5OjI5OjI0LTA2OjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDI1LTA4LTA3VDA5OjI5OjI0LTA2OjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpkNmFhZDYyYy0zZjU5LTQ1MjgtOWUxNi01NWUxNzQxM2I3YzkiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDowNzVlODU4NS04MmJkLTgyNGItOTIxZS00ZmI1N2E5YThhODIiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpiN2I4YzYzMi1mNDE4LTQ4OTctOGFlZi1hZDY0YWYzZGEyZDgiIHRpZmY6T3JpZW50YXRpb249IjEiIHRpZmY6WFJlc29sdXRpb249IjcyMDAwMC8xMDAwMCIgdGlmZjpZUmVzb2x1dGlvbj0iNzIwMDAwLzEwMDAwIiB0aWZmOlJlc29sdXRpb25Vbml0PSIyIiBleGlmOkNvbG9yU3BhY2U9IjY1NTM1IiBleGlmOlBpeGVsWERpbWVuc2lvbj0iNjQiIGV4aWY6UGl4ZWxZRGltZW5zaW9uPSIzMiI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4IiBzdEV2dDp3aGVuPSIyMDI1LTA3LTMwVDA5OjQ0OjMzLTA2OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjYuOCAoTWFjaW50b3NoKSIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6OTRlZmE2NmMtMDRkOS00MDlmLWE2MjItNTQ1ZmUxMmY3NzNlIiBzdEV2dDp3aGVuPSIyMDI1LTA3LTMwVDE3OjA1OjM1LTA2OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjYuOCAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YWE3MWZkZmYtODdkYi00ODkwLWE0NzYtZDQ4OGUwYjI3MDJmIiBzdEV2dDp3aGVuPSIyMDI1LTA4LTA3VDA5OjI5OjI0LTA2OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjYuOCAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY29udmVydGVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJmcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJkZXJpdmVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJjb252ZXJ0ZWQgZnJvbSBhcHBsaWNhdGlvbi92bmQuYWRvYmUucGhvdG9zaG9wIHRvIGltYWdlL3BuZyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6ZDZhYWQ2MmMtM2Y1OS00NTI4LTllMTYtNTVlMTc0MTNiN2M5IiBzdEV2dDp3aGVuPSIyMDI1LTA4LTA3VDA5OjI5OjI0LTA2OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjYuOCAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6YWE3MWZkZmYtODdkYi00ODkwLWE0NzYtZDQ4OGUwYjI3MDJmIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOmI3YjhjNjMyLWY0MTgtNDg5Ny04YWVmLWFkNjRhZjNkYTJkOCIgc3RSZWY6b3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmI3YjhjNjMyLWY0MTgtNDg5Ny04YWVmLWFkNjRhZjNkYTJkOCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pva31NMAAAImSURBVGje7ZjJTgJBEIZxFz0Yr2j05oBsI4nGiw/hM3jVB/Gqr+HyAp5cE1ckuMUNohENLqASjULK/yc9Fw+GhNHQNocPMjMsqb+q/q5uT/HFFjd5zUYkdRws7m1YPSLiqXU8bgvw/hSVm4uQJDb9k0YK8JG3JXsVluSOf85IAT6fbXm8CcvBbuCIf1AqjLcCL2gBzf9eAPKUiVCAvBIgCobACIiBPtBoQgWIEuAcPIAcKIAJ0G2CB+SdP0HAHaCN7WDSKnBkpAmqOUAwB5i3CrD/aYAniYBsr1rmzQFvj6r8t/ylzeUBsyZBZj93G5HT5KDsrFkLOgTvmgAMvnAfleuzIM2vuLVixYwSgKV/lw7J4V6592d1Cb5qAZh5Bs91n8a3u27F0fterQRgENWUPTOvgk8h+F6dgi8LQONiFisVwsk6v8eeZ9nD9Pbp+pj0GkBEKwHg2jNYukpcvznEcJLjOOsIwnde8z6f83Nc6uj2MLwSex7Bt6uRt1ltfJIcf7UQgC9Yt22U8SJPchgce5obGgdeZy5D5QmP5c51HllfhNvb338QgfeCURAHlhYCOGB89SGrUzzMwG7uGOS4q8N1DvdP8XweGZ9Cxn0//aja+IyBK9CkjQBuwf0+6GQFgJCWAihDY08vgS7d3N0NAVjGwyBR62X8ay2gHD3PMz1TBeA5Xvq/Bl+JADa4q6VDzL8WoB9M0w+MFMAE6gLUBagLYLYAX+wW3ayLpit2AAAAAElFTkSuQmCC",
    "Clouds": "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAACXBIWXMAAAsTAAALEwEAmpwYAAAJYWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4xLWMwMDMgNzkuOTY5MGE4N2ZjLCAyMDI1LzAzLzA2LTIwOjUwOjE2ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDI2LjggKE1hY2ludG9zaCkiIHhtcDpDcmVhdGVEYXRlPSIyMDI1LTA3LTMwVDA5OjQ0OjMzLTA2OjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyNS0wNy0zMFQxNzoyMzozMi0wNjowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyNS0wNy0zMFQxNzoyMzozMi0wNjowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MzI5YWRiNjktY2YxZi00YmY0LThiNTItOGJlYTlkZmEyNjA5IiB4bXBNTTpEb2N1bWVudElEPSJhZG9iZTpkb2NpZDpwaG90b3Nob3A6ZGJmZjcwNzctMDBkMy1hYzRlLWIzYWMtOTdkZTk4NzA0YjljIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4Ij4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpiN2I4YzYzMi1mNDE4LTQ4OTctOGFlZi1hZDY0YWYzZGEyZDgiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMDk6NDQ6MzMtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo5NGVmYTY2Yy0wNGQ5LTQwOWYtYTYyMi01NDVmZTEyZjc3M2UiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMTc6MDU6MzUtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo0YWJiODk5Yi1mNGE0LTQ1NzQtOGMxZC1lNjMxNDYyOTc0YmYiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMTc6MjM6MzItMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjb252ZXJ0ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImZyb20gYXBwbGljYXRpb24vdm5kLmFkb2JlLnBob3Rvc2hvcCB0byBpbWFnZS9wbmciLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImRlcml2ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImNvbnZlcnRlZCBmcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDozMjlhZGI2OS1jZjFmLTRiZjQtOGI1Mi04YmVhOWRmYTI2MDkiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMTc6MjM6MzItMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo0YWJiODk5Yi1mNGE0LTQ1NzQtOGMxZC1lNjMxNDYyOTc0YmYiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4IiBzdFJlZjpvcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4Ii8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+EfiYbwAABhdJREFUaN7tl39MlVUYx+/SpQgUMMFyE2WmLqzoj8ZMVhHMucSZOEX+kBnkD1gJNSlwiYrOAdLCLVcDBwPBxUChwExbqKMfbBFC8uumoCEoaPFDfly4973vOX2f27l6eH0RaOJW3bN99r7vfd9zzvN8z/M851wD55zxv5tV3BOqwP6O2oj9+datW9aNGzeympoaCx6HNd/J97aWnp7Oly9fLo+rSnPd7Xfx4kX1wIED7PLly0xvHLn19PTwc+fOjfWajfMb3Q+AVINkiDypKgnBtcZu27aNw1B6ZwYWcdU1uKCgwCZAS0uL1hBVM75qNBrVRYsW8VOnTukZPsqG3NxcHhsbyyfRmM7zYcN4SsttYGCAJyQk8B07dvChoSF5IFUeOC8vz7aSERERfMOGDby9vd1uvFWgNYh+M+M7JTg4mA8ODo5pw+nTp3l2djZHBPK6ujr5FS1CCTCJsX/T2KXX8g0itEc0ylj11N++fTvbsmUL6+/vV8U3ik6q8DNnzvDMzExeUVHB8a12HFXHMBrHvG/fPpaamqpdkFHfkrDh4eG8trbWIvrR9Vek5c/Xr18nEepwXR8dHX0N87dpbFPE84joF2morq4eCgwMtEghpmgdUxSF7969m8fExHDG2ERCzD7O3dba2korK4e/SVzNRUVFfO3atQwhzTo7O+1Oqdpxq6qqWGJiIm9sbKS60wtuAgqXO5WVlZe8vb1/nDlz5lXQOWvWrD+xCF9Q0IBuHVtpDIMBHxdGRkZ+QIPIkVBSUsJTUlI4TUiOh4aG2gqPxkGrjuO6YRcXF8fj4+N5Tk6OimJ3B2FsLS4uth48eJAFBATw/fv3U4rdFyF9fX2UQry8vNwW9uin4jt63we+AuuBMzkDX54BUeBVEAB6goKCMiHO72az+QbsN3V3d7OOjg41JCTkQ7wvoBSwswZ8DTrJkYaGBp6VlWUzvLCwcKJlQtWIMSpc6uvr+ZEjR9RDhw6Zly5dalqxYkVnUlLSSGlpqVVVVTlE7yVpfr5NfKQf37lzp3nz5s3KnDlzunxD0t1fiav3key/Dzj4LGgF/ehjcnV1Zc7OzszJyUmlKAEfazuRAFeFupOppg9qFnEdFgJ94+HhcfbEiRMJuP+c3rPRdeS+9JF+/wNEwPAMsOtBzksivAY+ATXgW3AMZIrr89oO/qBLCGCV6oCVT67JZwt76xIp9jImLsbusBL3X4owZmMVPWk86p8IktF/GnhsIgJIQjiDcLAVhIFA8KTex55iC7GMY9SoZjKZeFNTE0MoW3WEsBfZdjADE58k9XH/kUi5Fk2V1kYQ5WCuKJx+k3F8PMZ6MQN7fTblW1paGjt69Khe2I8qfm1tbYzytbm5WS81RkQ0FMBxD3ABuIriVUSHS1HRzZq+5PBP4l0+WCCtqBNwmyoBDAsXLoybO3euxc3NjWNfnchR01Ys161bx4eHh/XEagWvixD8TDPfYREFJ8F5UCvqUTn4BQSD6ZLzz4kc/nTKBCAjsZcqUVFR1jG2N6b570BbFcOxl+kcX8m5siVLlizAuEUi/GkOeqaUmwaoKBbT4QRsApXgGnhasskNJIkKvmYqU4AmexGrv2fZsmWW5ORkRWxT2lPdvSOWojDarsLCwuTfKRQukAAZGRmhGLMCvCPNkQC+EzUhxd3dPR7/BXYh+t729PRc7eLiQhHzBogFeaAKpIr0mdIacBcfH58UcPvKlSsDwqEBvRTAKW/Q39+f4fCkiNMZHdQrUROOeXl5NcLo78Fb4HEdsbeKA8z7QpR02inAecEusBI88TAL4IQEwKQuEGAPDhKXcFw1lpWVncVq06pStTPaj869vb2bfH19f9i7d+97eI7GCe5NnPxi0C9LhO1LD5iDvrktooH2a7MQLAekPWynJyWAZOR0Pz+/d2fPnt0Ep27Mnz+/efHixXXz5s0zIlS78P446Fi1apU30uYFnLjK8FwK/CY4visIotSbSof/sQCSoUbQBqpFThI3wQ2xenR/B7SQAI/SmUcigF6KgNW0L4tnP/CU/fk/L8C/HYcADgEcAjgEcAjgEMAhgEMAhwAOARwC/D/5C+lsStxN250BAAAAAElFTkSuQmCC",
    "Snow": "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAACXBIWXMAAAsTAAALEwEAmpwYAAAJYWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4xLWMwMDMgNzkuOTY5MGE4N2ZjLCAyMDI1LzAzLzA2LTIwOjUwOjE2ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDI2LjggKE1hY2ludG9zaCkiIHhtcDpDcmVhdGVEYXRlPSIyMDI1LTA3LTMwVDA5OjQ0OjMzLTA2OjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyNS0wNy0zMFQxNzoxNzo0OS0wNjowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyNS0wNy0zMFQxNzoxNzo0OS0wNjowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6YzQzY2IyZDktNjk1Yy00NGY3LThjYWQtZWQxOTE1MGMxNzdiIiB4bXBNTTpEb2N1bWVudElEPSJhZG9iZTpkb2NpZDpwaG90b3Nob3A6Y2E4YzVhOWItYzQyMi0yMjQ2LWFjNDAtN2U2NTZlMWJkZjFlIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4Ij4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpiN2I4YzYzMi1mNDE4LTQ4OTctOGFlZi1hZDY0YWYzZGEyZDgiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMDk6NDQ6MzMtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo5NGVmYTY2Yy0wNGQ5LTQwOWYtYTYyMi01NDVmZTEyZjc3M2UiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMTc6MDU6MzUtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDphZjRkZGViZS0zNzI1LTQ0MDUtYjg2My1hZjFiN2IyNjYyMDUiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMTc6MTc6NDktMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjb252ZXJ0ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImZyb20gYXBwbGljYXRpb24vdm5kLmFkb2JlLnBob3Rvc2hvcCB0byBpbWFnZS9wbmciLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImRlcml2ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImNvbnZlcnRlZCBmcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpjNDNjYjJkOS02OTVjLTQ0ZjctOGNhZC1lZDE5MTUwYzE3N2IiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMTc6MTc6NDktMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDphZjRkZGViZS0zNzI1LTQ0MDUtYjg2My1hZjFiN2IyNjYyMDUiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4IiBzdFJlZjpvcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4Ii8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+IshESgAAAb1JREFUaN7lmU1Lw1AQRZNXKqgVQW2tXYhIURSx/gR/uDv3CiIoahFRKArqwoVSP46bCYRgatLOJGmyCM0jUPrunc49k+cBXpWvsm5sHrgGGlUSoB66vwRegbMqCeADR3LfAoZAE3DAO1AruwCnwCfQlfWHfO4A38BL2QVoAh0RIhBgUdzvAmtVaYJ7wBNwDjwDh/L3qEQKOCn1faAPbAAX8qxRZgEWZONDoAfMAVfifAv4kYoodQVsAbfS7WeBN2BZnn0BbamQ0grgxG1PGt8AOJZ1J4sekJi+MviuA+AeWLEEoXpknZi+NEkuz1kgTF5R+vL+IzAtkstTgIC8lmLoa30UgWmRXJ4CBOR1F0Nfg1EEpkVyRRiHV4HtCH3tSuz41iRXlPcBTjb8GJe3ViRXFAFmgBv50X0pZT8LkrMSIGkOO+AhxrWTkHPOiuQ0BUiTw2HHNmNca6d0biyS0xQgbQ4HjvkxrrmQc2YkpylA2hwOO/aXa6bOWQgwaQ5n5pp1Exw3h2vCBFN9LpB5DhdFgDxyWHN8VqkA6xzWHp/VBbDOYe3x2ZQELTq69vg8dYej2uPz1J4Oa4/PE12/kOmIU/X3MkYAAAAASUVORK5CYII=",
    "Partly_Sun": "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKcGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4xLWMwMDMgNzkuOTY5MGE4N2ZjLCAyMDI1LzAzLzA2LTIwOjUwOjE2ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIiB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjYuOCAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjUtMDctMzBUMDk6NDQ6MzMtMDY6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDI1LTA3LTMxVDEyOjExOjM4LTA2OjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDI1LTA3LTMxVDEyOjExOjM4LTA2OjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpjOGU2N2Y4ZC03MGJlLTRiNTYtOWQ4NS02M2M2NTc3YjMxNDQiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDoxMGFkZTI5NC1mMTdkLTk4NDMtYWM2ZS01YWI5ODI1ZTRjY2QiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpiN2I4YzYzMi1mNDE4LTQ4OTctOGFlZi1hZDY0YWYzZGEyZDgiIHRpZmY6T3JpZW50YXRpb249IjEiIHRpZmY6WFJlc29sdXRpb249IjcyMDAwMC8xMDAwMCIgdGlmZjpZUmVzb2x1dGlvbj0iNzIwMDAwLzEwMDAwIiB0aWZmOlJlc29sdXRpb25Vbml0PSIyIiBleGlmOkNvbG9yU3BhY2U9IjY1NTM1IiBleGlmOlBpeGVsWERpbWVuc2lvbj0iNjQiIGV4aWY6UGl4ZWxZRGltZW5zaW9uPSIzMiI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4IiBzdEV2dDp3aGVuPSIyMDI1LTA3LTMwVDA5OjQ0OjMzLTA2OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjYuOCAoTWFjaW50b3NoKSIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6OTRlZmE2NmMtMDRkOS00MDlmLWE2MjItNTQ1ZmUxMmY3NzNlIiBzdEV2dDp3aGVuPSIyMDI1LTA3LTMwVDE3OjA1OjM1LTA2OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjYuOCAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6ZjNmYmNjMTctMDg4NS00ZjNiLWE4MzgtODExMDUyNGFkNDkyIiBzdEV2dDp3aGVuPSIyMDI1LTA3LTMxVDEyOjExOjM4LTA2OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjYuOCAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY29udmVydGVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJmcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJkZXJpdmVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJjb252ZXJ0ZWQgZnJvbSBhcHBsaWNhdGlvbi92bmQuYWRvYmUucGhvdG9zaG9wIHRvIGltYWdlL3BuZyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YzhlNjdmOGQtNzBiZS00YjU2LTlkODUtNjNjNjU3N2IzMTQ0IiBzdEV2dDp3aGVuPSIyMDI1LTA3LTMxVDEyOjExOjM4LTA2OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjYuOCAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6ZjNmYmNjMTctMDg4NS00ZjNiLWE4MzgtODExMDUyNGFkNDkyIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOmI3YjhjNjMyLWY0MTgtNDg5Ny04YWVmLWFkNjRhZjNkYTJkOCIgc3RSZWY6b3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmI3YjhjNjMyLWY0MTgtNDg5Ny04YWVmLWFkNjRhZjNkYTJkOCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRG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",
    "Mist": "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAACXBIWXMAAAsTAAALEwEAmpwYAAAJYWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4xLWMwMDMgNzkuOTY5MGE4N2ZjLCAyMDI1LzAzLzA2LTIwOjUwOjE2ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDI2LjggKE1hY2ludG9zaCkiIHhtcDpDcmVhdGVEYXRlPSIyMDI1LTA3LTMwVDA5OjQ0OjMzLTA2OjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyNS0wNy0zMFQxNzoyNjoxOC0wNjowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyNS0wNy0zMFQxNzoyNjoxOC0wNjowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6YzU5YjRkOTYtNmM4Ny00ZGY2LTgwNTUtZDFhOGU4ZjhjMzdiIiB4bXBNTTpEb2N1bWVudElEPSJhZG9iZTpkb2NpZDpwaG90b3Nob3A6NWE1MDIyZDgtOTQ4MC1hODQyLWFlYjctY2U5YWI5ZDFiZmI3IiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4Ij4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpiN2I4YzYzMi1mNDE4LTQ4OTctOGFlZi1hZDY0YWYzZGEyZDgiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMDk6NDQ6MzMtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo5NGVmYTY2Yy0wNGQ5LTQwOWYtYTYyMi01NDVmZTEyZjc3M2UiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMTc6MDU6MzUtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo0MTdlMjlmMi1hZjVkLTQzYTYtYWIzMC1lMzkyNTFiMmJhOTEiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMTc6MjY6MTgtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjb252ZXJ0ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImZyb20gYXBwbGljYXRpb24vdm5kLmFkb2JlLnBob3Rvc2hvcCB0byBpbWFnZS9wbmciLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImRlcml2ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImNvbnZlcnRlZCBmcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpjNTliNGQ5Ni02Yzg3LTRkZjYtODA1NS1kMWE4ZThmOGMzN2IiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMTc6MjY6MTgtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo0MTdlMjlmMi1hZjVkLTQzYTYtYWIzMC1lMzkyNTFiMmJhOTEiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4IiBzdFJlZjpvcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4Ii8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+mvvFmQAABbxJREFUaN7tl3tM1WUYx3/cQSQUSpyZjo3gDxqFTCtY/tFgbW1IbgRbVAitOaaDxmKjAOdYRs4uLuYKzLnoNrIRrEENVGIDFVCnqEAioHI43IqbHM7hXH5v3weew379djrJOQkUvNtn53d5L8/3+z7vc86RhBCymGtmviYsjPUdNQPdt7e3i/j4eLmlpYXezwC9qt/89fT0tMjMzBS1tbV0a1TMa1GsJa5fvy5OnTolq54r5xTKOcvLy0VNTY2w0+R/eCbr9fp7kZGRNyXVgtZOFoURswMsFovc1NREgc7Chs2wsBn1ogMDAyIjI0NUVFTIJpPJViBWI8Tk5KSckpIij46OWuwEPhtfc3OzSEtLE2NjY2KBTW2KnJiYeFH6O6eVTaPRiMLCQpGXlyeGh4eFjR23qO5nSkpKTA0NDRaFUTr+NNsIyJyTk2M+cuSIWTXXXxqMEocOHRJxcXG2MoTmrqAk4Xe/2ZuL2tGjRxskTm2DSsB8kAaDQeTm5lIay2hWQdZPk42jQteGqqoqGUeFMoHu74EhXsekMoEwHjhwwIx1bAmbFUE7XlZWJqemppoPHz5MfQbBBGfgVXCO578SHR39rdForMN1p2o+kzU+GldcXPyexMENK4IxKYV1dHSI5OTk+00xqzlklra0tNSIsXTfBqrBbX5Pu3UF3AH7Ghsbc8LDw3Xd3d0GFkTC+sHvHJ+hoKCgBzs/HhUV1d/X13cZz0pBM5ii/sjM1qysrP2SJH0BSjs7OzfheVFlZeWF8fHxUWWgtJnp6elmb29vmQwgYnjR+UxAkRC9vb0iOztbFBUVqYUqjZJVBuhZ4Dj4NSQkZNo0VwQ0LKYefA+6dTpdnpub224E/APIxLMw8DG4xCl8AXwQExPziqen542wsLBruD8G6rjPNyAR+GL8W+Ak2AP8SRcEbgkICOgPDQ01JiUlTUOLae/evWLr1q3Cx8fH4u7uftJqALGLdgmpO4rKLcfGxoqEhASRn58vtFqtrEh7LWhh0TrF2ZZZvIl39yAC8fL19b00NDTUyP3GFEbk4X0lqAU7wXaQAnzxbj0IBB4UG9oboBHEgh3gWS+/Tc+ve+xp6l8IohU65vGea8kQ+1NwcPBYUFCQEYZY8DmB5+9TpkjPZV37EXjwoGpUWQ2q/ERXV9cIi+qmos4iJwHtAglq5XN4R7H7/WxQB3gKC+z28PC4FRERkYr7nSANvAo2sLAXtu+p2YD1t+A6EpSDX/jzE5AP3gZFoASU8S6f4FQ/xju/2ZYBCiNcwBPgIAjltaPAGTJgPajnzjtYFKXvLXARnOezq+dn+ziFz7JYOoMjPM7AafsMJn8SXELqTgUGBg76+/tfQcrV49k50A7aWJgP1qc4JA5sDQgHu8CbYB9IBcFqYRjzEOgEgcDFnglK0EJAK3iRJnED6xQdHuHzZ+Adp0KkwXmt27hx43cY1KPouw3fEh/iXWFPT89+fI0Fc4pSwBPgXfAl6AV/AB3QgrvgZ/ARWIv1g0DB/QpQmeDLJgQswACqO6/NXiseuoAIvvcCL4Hi06dPf42vleN4dxmMgJdVk91mQV3gJgsv4WJEaVwAtgGaYwpc5RTO5/P7OahhMZOOmOAMSiFeLPJTTo823jXavRbmdacWkyRXEMNp/Q7Ipjnp/Ft3c8kM4ADXgyTwGe9SEQdKQQY5kJ6uwMuZADF+rRNjB6lO3LcBdiY6DzwdCOBRUEdjgbeDIrSOrM1jqcDfBf7OGkCV+isnduIGeNzBsVSkBxblCNgJwh087IQBm4HfYp/vf82ABwX9AKI6seQGOHHGXJ2p3BjbYu98LqYBZxwU4A0uOmlCN1iz1AZQoZlyUIAfOLEcz/eCaoDiD9GKQlqJolcN+K8YwL8/XFayAfR/v/pB/kla9ilKv0DB8dUasGrA/9QA+im8lP8HloMBZ9kElxV7BCC+Yan+FK34GvAntko9lmfz6OEAAAAASUVORK5CYII=",
    "Drizzle": "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAACXBIWXMAAAsTAAALEwEAmpwYAAAJYWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4xLWMwMDMgNzkuOTY5MGE4N2ZjLCAyMDI1LzAzLzA2LTIwOjUwOjE2ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDI2LjggKE1hY2ludG9zaCkiIHhtcDpDcmVhdGVEYXRlPSIyMDI1LTA3LTMwVDA5OjQ0OjMzLTA2OjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyNS0wNy0zMFQxNzoyNjoxOC0wNjowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyNS0wNy0zMFQxNzoyNjoxOC0wNjowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6YzU5YjRkOTYtNmM4Ny00ZGY2LTgwNTUtZDFhOGU4ZjhjMzdiIiB4bXBNTTpEb2N1bWVudElEPSJhZG9iZTpkb2NpZDpwaG90b3Nob3A6NWE1MDIyZDgtOTQ4MC1hODQyLWFlYjctY2U5YWI5ZDFiZmI3IiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4Ij4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpiN2I4YzYzMi1mNDE4LTQ4OTctOGFlZi1hZDY0YWYzZGEyZDgiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMDk6NDQ6MzMtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo5NGVmYTY2Yy0wNGQ5LTQwOWYtYTYyMi01NDVmZTEyZjc3M2UiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMTc6MDU6MzUtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo0MTdlMjlmMi1hZjVkLTQzYTYtYWIzMC1lMzkyNTFiMmJhOTEiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMTc6MjY6MTgtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjb252ZXJ0ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImZyb20gYXBwbGljYXRpb24vdm5kLmFkb2JlLnBob3Rvc2hvcCB0byBpbWFnZS9wbmciLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImRlcml2ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImNvbnZlcnRlZCBmcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpjNTliNGQ5Ni02Yzg3LTRkZjYtODA1NS1kMWE4ZThmOGMzN2IiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMTc6MjY6MTgtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo0MTdlMjlmMi1hZjVkLTQzYTYtYWIzMC1lMzkyNTFiMmJhOTEiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4IiBzdFJlZjpvcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4Ii8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+mvvFmQAABbxJREFUaN7tl3tM1WUYx3/cQSQUSpyZjo3gDxqFTCtY/tFgbW1IbgRbVAitOaaDxmKjAOdYRs4uLuYKzLnoNrIRrEENVGIDFVCnqEAioHI43IqbHM7hXH5v3weew379djrJOQkUvNtn53d5L8/3+z7vc86RhBCymGtmviYsjPUdNQPdt7e3i/j4eLmlpYXezwC9qt/89fT0tMjMzBS1tbV0a1TMa1GsJa5fvy5OnTolq54r5xTKOcvLy0VNTY2w0+R/eCbr9fp7kZGRNyXVgtZOFoURswMsFovc1NREgc7Chs2wsBn1ogMDAyIjI0NUVFTIJpPJViBWI8Tk5KSckpIij46OWuwEPhtfc3OzSEtLE2NjY2KBTW2KnJiYeFH6O6eVTaPRiMLCQpGXlyeGh4eFjR23qO5nSkpKTA0NDRaFUTr+NNsIyJyTk2M+cuSIWTXXXxqMEocOHRJxcXG2MoTmrqAk4Xe/2ZuL2tGjRxskTm2DSsB8kAaDQeTm5lIay2hWQdZPk42jQteGqqoqGUeFMoHu74EhXsekMoEwHjhwwIx1bAmbFUE7XlZWJqemppoPHz5MfQbBBGfgVXCO578SHR39rdForMN1p2o+kzU+GldcXPyexMENK4IxKYV1dHSI5OTk+00xqzlklra0tNSIsXTfBqrBbX5Pu3UF3AH7Ghsbc8LDw3Xd3d0GFkTC+sHvHJ+hoKCgBzs/HhUV1d/X13cZz0pBM5ii/sjM1qysrP2SJH0BSjs7OzfheVFlZeWF8fHxUWWgtJnp6elmb29vmQwgYnjR+UxAkRC9vb0iOztbFBUVqYUqjZJVBuhZ4Dj4NSQkZNo0VwQ0LKYefA+6dTpdnpub224E/APIxLMw8DG4xCl8AXwQExPziqen542wsLBruD8G6rjPNyAR+GL8W+Ak2AP8SRcEbgkICOgPDQ01JiUlTUOLae/evWLr1q3Cx8fH4u7uftJqALGLdgmpO4rKLcfGxoqEhASRn58vtFqtrEh7LWhh0TrF2ZZZvIl39yAC8fL19b00NDTUyP3GFEbk4X0lqAU7wXaQAnzxbj0IBB4UG9oboBHEgh3gWS+/Tc+ve+xp6l8IohU65vGea8kQ+1NwcPBYUFCQEYZY8DmB5+9TpkjPZV37EXjwoGpUWQ2q/ERXV9cIi+qmos4iJwHtAglq5XN4R7H7/WxQB3gKC+z28PC4FRERkYr7nSANvAo2sLAXtu+p2YD1t+A6EpSDX/jzE5AP3gZFoASU8S6f4FQ/xju/2ZYBCiNcwBPgIAjltaPAGTJgPajnzjtYFKXvLXARnOezq+dn+ziFz7JYOoMjPM7AafsMJn8SXELqTgUGBg76+/tfQcrV49k50A7aWJgP1qc4JA5sDQgHu8CbYB9IBcFqYRjzEOgEgcDFnglK0EJAK3iRJnED6xQdHuHzZ+Adp0KkwXmt27hx43cY1KPouw3fEh/iXWFPT89+fI0Fc4pSwBPgXfAl6AV/AB3QgrvgZ/ARWIv1g0DB/QpQmeDLJgQswACqO6/NXiseuoAIvvcCL4Hi06dPf42vleN4dxmMgJdVk91mQV3gJgsv4WJEaVwAtgGaYwpc5RTO5/P7OahhMZOOmOAMSiFeLPJTTo823jXavRbmdacWkyRXEMNp/Q7Ipjnp/Ft3c8kM4ADXgyTwGe9SEQdKQQY5kJ6uwMuZADF+rRNjB6lO3LcBdiY6DzwdCOBRUEdjgbeDIrSOrM1jqcDfBf7OGkCV+isnduIGeNzBsVSkBxblCNgJwh087IQBm4HfYp/vf82ABwX9AKI6seQGOHHGXJ2p3BjbYu98LqYBZxwU4A0uOmlCN1iz1AZQoZlyUIAfOLEcz/eCaoDiD9GKQlqJolcN+K8YwL8/XFayAfR/v/pB/kla9ilKv0DB8dUasGrA/9QA+im8lP8HloMBZ9kElxV7BCC+Yan+FK34GvAntko9lmfz6OEAAAAASUVORK5CYII=",
    "Rain": "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAACXBIWXMAAAsTAAALEwEAmpwYAAAJYWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4xLWMwMDMgNzkuOTY5MGE4N2ZjLCAyMDI1LzAzLzA2LTIwOjUwOjE2ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDI2LjggKE1hY2ludG9zaCkiIHhtcDpDcmVhdGVEYXRlPSIyMDI1LTA3LTMwVDA5OjQ0OjMzLTA2OjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyNS0wNy0zMFQxNzoyNjoxOC0wNjowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyNS0wNy0zMFQxNzoyNjoxOC0wNjowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6YzU5YjRkOTYtNmM4Ny00ZGY2LTgwNTUtZDFhOGU4ZjhjMzdiIiB4bXBNTTpEb2N1bWVudElEPSJhZG9iZTpkb2NpZDpwaG90b3Nob3A6NWE1MDIyZDgtOTQ4MC1hODQyLWFlYjctY2U5YWI5ZDFiZmI3IiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4Ij4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpiN2I4YzYzMi1mNDE4LTQ4OTctOGFlZi1hZDY0YWYzZGEyZDgiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMDk6NDQ6MzMtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo5NGVmYTY2Yy0wNGQ5LTQwOWYtYTYyMi01NDVmZTEyZjc3M2UiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMTc6MDU6MzUtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo0MTdlMjlmMi1hZjVkLTQzYTYtYWIzMC1lMzkyNTFiMmJhOTEiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMTc6MjY6MTgtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjb252ZXJ0ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImZyb20gYXBwbGljYXRpb24vdm5kLmFkb2JlLnBob3Rvc2hvcCB0byBpbWFnZS9wbmciLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImRlcml2ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImNvbnZlcnRlZCBmcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpjNTliNGQ5Ni02Yzg3LTRkZjYtODA1NS1kMWE4ZThmOGMzN2IiIHN0RXZ0OndoZW49IjIwMjUtMDctMzBUMTc6MjY6MTgtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNi44IChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo0MTdlMjlmMi1hZjVkLTQzYTYtYWIzMC1lMzkyNTFiMmJhOTEiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4IiBzdFJlZjpvcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6YjdiOGM2MzItZjQxOC00ODk3LThhZWYtYWQ2NGFmM2RhMmQ4Ii8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+mvvFmQAABbxJREFUaN7tl3tM1WUYx3/cQSQUSpyZjo3gDxqFTCtY/tFgbW1IbgRbVAitOaaDxmKjAOdYRs4uLuYKzLnoNrIRrEENVGIDFVCnqEAioHI43IqbHM7hXH5v3weew379djrJOQkUvNtn53d5L8/3+z7vc86RhBCymGtmviYsjPUdNQPdt7e3i/j4eLmlpYXezwC9qt/89fT0tMjMzBS1tbV0a1TMa1GsJa5fvy5OnTolq54r5xTKOcvLy0VNTY2w0+R/eCbr9fp7kZGRNyXVgtZOFoURswMsFovc1NREgc7Chs2wsBn1ogMDAyIjI0NUVFTIJpPJViBWI8Tk5KSckpIij46OWuwEPhtfc3OzSEtLE2NjY2KBTW2KnJiYeFH6O6eVTaPRiMLCQpGXlyeGh4eFjR23qO5nSkpKTA0NDRaFUTr+NNsIyJyTk2M+cuSIWTXXXxqMEocOHRJxcXG2MoTmrqAk4Xe/2ZuL2tGjRxskTm2DSsB8kAaDQeTm5lIay2hWQdZPk42jQteGqqoqGUeFMoHu74EhXsekMoEwHjhwwIx1bAmbFUE7XlZWJqemppoPHz5MfQbBBGfgVXCO578SHR39rdForMN1p2o+kzU+GldcXPyexMENK4IxKYV1dHSI5OTk+00xqzlklra0tNSIsXTfBqrBbX5Pu3UF3AH7Ghsbc8LDw3Xd3d0GFkTC+sHvHJ+hoKCgBzs/HhUV1d/X13cZz0pBM5ii/sjM1qysrP2SJH0BSjs7OzfheVFlZeWF8fHxUWWgtJnp6elmb29vmQwgYnjR+UxAkRC9vb0iOztbFBUVqYUqjZJVBuhZ4Dj4NSQkZNo0VwQ0LKYefA+6dTpdnpub224E/APIxLMw8DG4xCl8AXwQExPziqen542wsLBruD8G6rjPNyAR+GL8W+Ak2AP8SRcEbgkICOgPDQ01JiUlTUOLae/evWLr1q3Cx8fH4u7uftJqALGLdgmpO4rKLcfGxoqEhASRn58vtFqtrEh7LWhh0TrF2ZZZvIl39yAC8fL19b00NDTUyP3GFEbk4X0lqAU7wXaQAnzxbj0IBB4UG9oboBHEgh3gWS+/Tc+ve+xp6l8IohU65vGea8kQ+1NwcPBYUFCQEYZY8DmB5+9TpkjPZV37EXjwoGpUWQ2q/ERXV9cIi+qmos4iJwHtAglq5XN4R7H7/WxQB3gKC+z28PC4FRERkYr7nSANvAo2sLAXtu+p2YD1t+A6EpSDX/jzE5AP3gZFoASU8S6f4FQ/xju/2ZYBCiNcwBPgIAjltaPAGTJgPajnzjtYFKXvLXARnOezq+dn+ziFz7JYOoMjPM7AafsMJn8SXELqTgUGBg76+/tfQcrV49k50A7aWJgP1qc4JA5sDQgHu8CbYB9IBcFqYRjzEOgEgcDFnglK0EJAK3iRJnED6xQdHuHzZ+Adp0KkwXmt27hx43cY1KPouw3fEh/iXWFPT89+fI0Fc4pSwBPgXfAl6AV/AB3QgrvgZ/ARWIv1g0DB/QpQmeDLJgQswACqO6/NXiseuoAIvvcCL4Hi06dPf42vleN4dxmMgJdVk91mQV3gJgsv4WJEaVwAtgGaYwpc5RTO5/P7OahhMZOOmOAMSiFeLPJTTo823jXavRbmdacWkyRXEMNp/Q7Ipjnp/Ft3c8kM4ADXgyTwGe9SEQdKQQY5kJ6uwMuZADF+rRNjB6lO3LcBdiY6DzwdCOBRUEdjgbeDIrSOrM1jqcDfBf7OGkCV+isnduIGeNzBsVSkBxblCNgJwh087IQBm4HfYp/vf82ABwX9AKI6seQGOHHGXJ2p3BjbYu98LqYBZxwU4A0uOmlCN1iz1AZQoZlyUIAfOLEcz/eCaoDiD9GKQlqJolcN+K8YwL8/XFayAfR/v/pB/kla9ilKv0DB8dUasGrA/9QA+im8lP8HloMBZ9kElxV7BCC+Yan+FK34GvAntko9lmfz6OEAAAAASUVORK5CYII=",
}

def main(config):
    # Get configuration values with defaults
    scale = 2 if config.bool("$2x") else 1
    location = config.get("location", DEFAULT_LOCATION)
    loc = json.decode(location)

    # don't need locality anymore because we are using lat and lng
    # locality = loc["locality"]
    lat = loc["lat"]
    lng = loc["lng"]
    units = config.get("units", "imperial")
    showthreeday = config.bool("showthreeday", False)  # Add new config option
    lang = config.get("lang", "en")

    # Get API keys - check for both V3 and V2.5
    api_v3_key = config.get("api_v3", "")
    api_v2_key = config.get("api_v2", config.get("api", ""))  # fallback to original field for backward compatibility

    cache_mins_str = config.str("cache_mins", str(DEFAULT_CACHE_MINS))
    cache_mins = int(cache_mins_str) if cache_mins_str.isdigit() else DEFAULT_CACHE_MINS
    cache_sec = cache_mins * 60

    # Determine which API to use - prefer V3 if available, fallback to V2.5
    if api_v3_key and api_v3_key != "":
        # Use One Call API 3.0
        url = "https://api.openweathermap.org/data/3.0/onecall?lat={}&lon={}&units={}&appid={}".format(lat, lng, units, api_v3_key)

        # Fetch weather data
        rep = http.get(url, ttl_seconds = cache_sec)
        if rep.status_code != 200:
            return error_display("Weather API Error")

        weather_data = json.decode(rep.body())

        # Process forecast data using One Call API 3.0 processing
        daily_data = process_forecast_onecall(weather_data)
    elif api_v2_key and api_v2_key != "":
        # Use Standard Forecast API 2.5
        url = "https://api.openweathermap.org/data/2.5/forecast?lat={}&lon={}&units={}&appid={}".format(lat, lng, units, api_v2_key)

        # Fetch weather data
        rep = http.get(url, ttl_seconds = cache_sec)
        if rep.status_code != 200:
            return error_display("Weather API Error")

        weather_data = json.decode(rep.body())

        # Process forecast data using Standard API 2.5 processing
        daily_data = process_forecast(weather_data["list"])
    else:
        return error_display("No API Key Provided", scale)

    # Create the display
    if showthreeday:
        return render_weather(daily_data, lang, scale)
    else:
        return render_single_day(daily_data, lang, scale)

def render_single_day(daily_data, lang, scale = 1):
    if len(daily_data) < 2:  # If we don't have at least 2 days
        return error_display("Weather API Error")

    day = daily_data[0]
    tomorrow = daily_data[1]

    # Get day abbreviation
    day_abbr = _get_day_abbr(day["date"], lang)
    tomorrow_abbr = _get_day_abbr(tomorrow["date"], lang)
    slide_percentage = get_slide_percentage(day["weather"])
    should_render_day_at_top = get_should_render_day_at_top(day["weather"])

    # TIMING CALCULATIONS
    slide_start_seconds = 2
    delay_ms = int(100 / scale)
    static_frames_before = int(slide_start_seconds * 1000 / delay_ms)
    slide_distance = int(64 * slide_percentage / 100) * scale
    static_frames_after = 100 * scale

    # Animation parameters
    today_width_start = 63 * scale
    today_width_end = 42 * scale
    slide_distance_start = 0
    slide_distance_end = slide_distance

    # STUTTER ANIMATION PARAMETERS
    stutter_distance = 3 * scale  # How far to move in first step
    stutter_width_change = 3 * scale  # How much today_width shrinks in first step
    stutter_frames = 3 * scale  # How many frames for the initial stutter movement
    stutter_pause_frames = 6 * scale # How long to pause after stutter (0.5 seconds)
    finish_frames = 7 * scale # How many frames to complete the rest

    # BACKGROUND ANIMATION PARAMETERS (moves faster)
    bg_stutter_frames = 2 * scale  # Background moves faster in stutter
    bg_finish_frames = 5 * scale  # Background finishes faster

    return render.Root(
        delay = delay_ms,
        child = render.Animation(
            children = [
                # PHASE 1: STATIC
                render_frame(
                    slide_distance_start,
                    today_width_start,
                    day,
                    day_abbr,
                    tomorrow,
                    tomorrow_abbr,
                    should_render_day_at_top,
                    scale,
                ),
            ] * static_frames_before + [
                # PHASE 2A: STUTTER MOVEMENT
                render_frame(
                    # Background moves faster during stutter
                    int((min(i + 1, bg_stutter_frames)) * stutter_distance / bg_stutter_frames),
                    # Width changes at normal pace
                    today_width_start - int((i + 1) * stutter_width_change / stutter_frames),
                    day,
                    day_abbr,
                    tomorrow,
                    tomorrow_abbr,
                    should_render_day_at_top,
                    scale,
                )
                for i in range(stutter_frames)
            ] + [
                # PHASE 2B: PAUSE on the stutter position
                render_frame(
                    stutter_distance,
                    today_width_start - stutter_width_change,
                    day,
                    day_abbr,
                    tomorrow,
                    tomorrow_abbr,
                    should_render_day_at_top,
                    scale,
                ),
            ] * stutter_pause_frames + [
                # PHASE 2C: COMPLETE the rest of the animation
                render_frame(
                    # Background finishes faster
                    stutter_distance + int((min(i + 1, bg_finish_frames)) * (slide_distance_end - stutter_distance) / bg_finish_frames),
                    # Width changes at normal pace
                    (today_width_start - stutter_width_change) + int((i + 1) * ((today_width_end) - (today_width_start - stutter_width_change)) / finish_frames),
                    day,
                    day_abbr,
                    tomorrow,
                    tomorrow_abbr,
                    should_render_day_at_top,
                    scale,
                )
                for i in range(finish_frames)
            ] + [
                # PHASE 3: STATIC AFTER
                render_frame(
                    slide_distance_end,
                    today_width_end,
                    day,
                    day_abbr,
                    tomorrow,
                    tomorrow_abbr,
                    should_render_day_at_top,
                    scale,
                ),
            ] * static_frames_after,
        ),
    )

def get_should_render_day_at_top(forecast):
    if forecast == "Snow":
        return True
    return False

def get_slide_percentage(forecast):
    """
    Returns the slide percentage based on weather forecast.
    Default is 33% for most weather types, with Clear being 10%.
    """
    slide_map = {
        "Clear": 10,
        "Clouds": 40,
        "Rain": 33,
        "Snow": 40,
        "Thunderstorm": 33,
        "Drizzle": 33,
        "Mist": 40,
        "Partly_Sun": 33,
    }
    return slide_map.get(forecast, 40)

def _get_day_abbr(date, lang):
    abbr = date.format("Mon")[:3].upper()
    return LANGUAGE_LOCALES[abbr][lang]

def get_weather_image(forecast):
    return WEATHER_FULL_IMAGE.get(forecast, "")

def render_frame(slide_distance, today_width, day, day_abbr, tomorrow, tomorrow_abbr, day_top = False, scale = 1):
    tomorrow_width = get_forecast_width(tomorrow["high"], False) * scale if scale == 2 else 16
    return render.Stack(
        children = [
            # BACKGROUND IMAGE - In final slid position
            render.Padding(
                pad = (-slide_distance, 0, 0, 0),  # Final negative padding (background fully slid left)
                child = render.Image(
                    src = base64.decode(get_weather_image(day["weather"])),
                    width = 64 * scale,
                    height = 32 * scale,
                ),
            ),
            # Primary Box
            render.Box(
                width = 64 * scale,
                height = 32 * scale,
                #PRIMARY ROW
                child = render.Row(
                    main_align = "start",
                    cross_align = "start",
                    expanded = True,
                    children = [
                        render_today_forecast_column(day, day_abbr, today_width, day_top, scale),  #end row
                        render.Row(
                            children = [
                                render.Padding(
                                    pad = (scale, 3 * scale, scale, 3 * scale),
                                    child = render.Box(
                                        width = 1 * scale,
                                        height = 26 * scale,
                                        color = "#FFFFFF1A",
                                    ),
                                ),
                            ],
                        ),
                        render.Column(
                            main_align = "start",
                            cross_align = "start",
                            expanded = True,
                            children = [
                                render.Row(
                                    main_align = "start",
                                    cross_align = "start",
                                    expanded = True,
                                    children = [
                                        render.Box(
                                            width = tomorrow_width,
                                            height = 13 * scale,
                                            child = render.Column(
                                                main_align = "start",
                                                cross_align = "center",
                                                expanded = True,
                                                children = [
                                                    render.Padding(
                                                        pad = (0, scale, 0, 0),
                                                        child = render.Text(
                                                            tomorrow_abbr,
                                                            font = "5x8" if scale == 1 else "terminus-16",
                                                            color = "#FFF",
                                                        ),
                                                    ),
                                                ],
                                            ),
                                        ),
                                    ],
                                ),
                                render_forecast(tomorrow, False, scale),
                            ],
                        ),
                    ],
                ),
            ),
        ],
    )

def render_today_forecast_column(day, day_abbr, today_width, day_top = False, scale = 1):
    day_offset = get_day_offset(day["high"]) * scale
    if day_top == True:
        return render.Column(
            expanded = True,
            main_align = "start",
            cross_align = "start",
            children = [
                render.Row(
                    children = [
                        render.Box(
                            width = 20 * scale,
                            height = 13 * scale,
                            child = render.Padding(
                                pad = (-scale, 0, scale, 2 * scale),  # (left, top, right, bottom) padding
                                child = render.Box(
                                    width = 20 * scale,
                                    height = 8 * scale,
                                    color = "#00000000",
                                    child = render.Text(
                                        day_abbr,
                                        font = "5x8" if scale == 1 else "terminus-16",
                                        color = "#FFF",
                                    ),
                                ),
                            ),
                        ),
                    ],
                ),
                render.Row(
                    children = [
                        render.Box(
                            width = today_width,
                            height = 19 * scale,
                            child = render_today_forecast(day, "", today_width - day_offset, "#00000000", scale),
                        ),
                    ],
                ),  #end column
            ],
        )

    return render.Column(
        expanded = True,
        main_align = "start",
        cross_align = "center",
        children = [
            render.Row(
                children = [
                    render.Box(
                        width = 1 * scale,
                        height = 13 * scale,
                    ),
                ],
            ),
            render.Row(
                children = [
                    render.Box(
                        width = today_width,
                        height = 19 * scale,  #63 -> 42
                        child = render_today_forecast(day, day_abbr, today_width - day_offset, scale = scale),
                    ),  #33 -> 12
                ],
            ),  #end column
        ],
    )

def render_today_forecast(day, day_abbr, padding, color = "#000000CC", scale = 1):
    return render.Row(
        expanded = True,
        main_align = "space_evenly",  # Spreads items to opposite ends
        cross_align = "end",  # Aligns items to bottom
        children = [
            # DAY NAME - Left side of display
            render.Padding(
                pad = (scale, 0, padding, 2 * scale),  # (left, top, right, bottom) padding
                child = render.Box(
                    width = 14 * scale,
                    height = 8 * scale,
                    color = color,
                    child = render.Text(
                        day_abbr,
                        font = "5x8" if scale == 1 else "terminus-16",
                        color = "#FFF",
                    ),
                ),
            ),
            render_forecast(day, True, scale),
        ],
    )

def render_forecast(day, is_today, scale = 1):
    forecast_width = get_forecast_width(day["high"], is_today) * scale
    forecast_padding = get_forecast_padding(day["high"], is_today) * scale
    return render.Row(
        main_align = "center",
        cross_align = "start",
        expanded = True,
        children = [
            render.Box(
                width = forecast_width,
                height = 19 * scale,
                child =  #containing box
                    render.Column(
                        main_align = "start",
                        cross_align = "start",
                        expanded = True,
                        children = [
                            render.Padding(
                                pad = (0, scale, forecast_padding, 2 * scale),
                                child = render.Column(
                                    cross_align = "end",
                                    children = [
                                        #column children
                                        render.Text(
                                            "%d°" % round_temp(day["high"]),
                                            font = "tb-8" if scale == 1 else "terminus-16",
                                            color = "#FFF",
                                        ),
                                        render.Text(
                                            "%d°" % round_temp(day["low"]),
                                            font = "tb-8" if scale == 1 else "terminus-16",
                                            color = "#888",
                                        ),
                                    ],  #end column children
                                ),  #end column
                            ),
                        ],
                    ),  #end padding, #end column children, #end column
            ),  #end containing box
        ],  #end row children
    )

def get_forecast_padding(temp, is_today):
    temp = round_temp(temp)
    if temp >= 100 or temp <= -10:
        return 4
    if is_today:
        return 0
    return 0

def get_day_offset(temp):
    temp = round_temp(temp)
    if temp >= 100 or temp <= -10:
        return 38
    return 30

def get_forecast_width(temp, is_today):
    temp = round_temp(temp)
    if temp >= 100 or temp <= -10:
        return 24
    if is_today:
        return 16
    return 20

def round_temp(temp):
    return (temp * 10 + 5) // 10

def process_forecast_onecall(weather_data):
    """
    Process One Call API 3.0 response data.
    The One Call API provides daily forecasts directly.
    """
    daily_forecasts = []

    # Get current weather for today
    if "current" in weather_data:
        current = weather_data["current"]
        current_time = time.from_timestamp(current["dt"])

        # Get main weather and icon code
        weather_main = current["weather"][0]["main"]
        weather_icon = current["weather"][0]["icon"]

        # Check if icon starts with 02 or 03 and override weather_main
        if weather_icon.startswith(("02", "03")):
            weather_main = "Partly_Sun"

        # Check if weather is some atmospheric condition that can be represented as fog
        if weather_main == "Haze" or weather_main == "Smoke" or weather_main == "Ash":
            weather_main = "Mist"

        daily_forecasts.append({
            "high": current["temp"],
            "low": current["temp"],
            "weather": weather_main,
            "date": current_time,
        })

    # Process daily forecasts
    if "daily" in weather_data:
        for i, day in enumerate(weather_data["daily"]):
            if i >= 3:  # Limit to 3 days total
                break

            # Skip today if we already added current weather
            if len(daily_forecasts) > 0 and i == 0:
                # Update today's data with daily high/low
                daily_forecasts[0]["high"] = day["temp"]["max"]
                daily_forecasts[0]["low"] = day["temp"]["min"]
                continue

            day_time = time.from_timestamp(day["dt"])

            # Get main weather and icon code
            weather_main = day["weather"][0]["main"]
            weather_icon = day["weather"][0]["icon"]

            # Check if icon starts with 02 or 03 and override weather_main
            if weather_icon.startswith(("02", "03")):
                weather_main = "Partly_Sun"

            # Check if weather is some atmospheric condition that can be represented as fog
            if weather_main == "Haze" or weather_main == "Smoke" or weather_main == "Ash":
                weather_main = "Mist"

            daily_forecasts.append({
                "high": day["temp"]["max"],
                "low": day["temp"]["min"],
                "weather": weather_main,
                "date": day_time,
            })

    return daily_forecasts[:3]

def process_forecast(forecast_list):
    # Group forecasts by day and find high/low temps
    # This function processes Standard API 2.5 forecast data
    days = {}

    for item in forecast_list:
        # Convert timestamp to day
        day_time = time.from_timestamp(item["dt"])
        day_key = day_time.format("2006-01-02")

        temp = item["main"]["temp"]

        # Get both main weather and icon code
        weather_main = item["weather"][0]["main"]
        weather_icon = item["weather"][0]["icon"]

        # Check if icon starts with 02 or 03 and override weather_main
        if weather_icon.startswith(("02", "03")):
            weather_main = "Partly_Sun"

        # Check if weather is some atmospheric condition that can be represented as fog
        if weather_main == "Haze" or weather_main == "Smoke" or weather_main == "Ash":
            weather_main = "Mist"

        if day_key not in days:
            days[day_key] = {
                "high": temp,
                "low": temp,
                "weather": weather_main,
                "date": day_time,
            }
        else:
            days[day_key]["high"] = max(days[day_key]["high"], temp)
            days[day_key]["low"] = min(days[day_key]["low"], temp)

    # Sort and take first 3 days
    sorted_days = sorted(days.values(), key = lambda x: x["date"])[:3]
    return sorted_days

def render_weather(daily_data, lang, scale = 1):
    # Create weather icons mapping
    WEATHER_ICONS = {
        "Clear": "iVBORw0KGgoAAAANSUhEUgAAAA0AAAANCAIAAAD9iXMrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHgg/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl/AV/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAARKCBKrBBG/TBGCzABhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0HDYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofcn8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJgUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJzs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3vdy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfyl5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADqYAAAOpgAABdvkl/FRgAAAEhJREFUeNpiYCAb1JfKEiX3/7U1Pj3I0rhEUAz+/9oan9VwRRCERSlEGmLR/9fW/1/bQBgQEZwacJpHmvuI8i8J4UeUHEEAGAAuVD4b29LqRQAAAABJRU5ErkJggg==",
        "Clouds": "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",
        "Rain": "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",
        "Snow": "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",
        "Thunderstorm": "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",
        "Drizzle": "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",
        "Mist": "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",
        "Partly_Sun": "iVBORw0KGgoAAAANSUhEUgAAAA0AAAANCAIAAAD9iXMrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHgg/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl/AV/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAARKCBKrBBG/TBGCzABhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0HDYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofcn8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJgUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJzs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3vdy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfyl5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADqYAAAOpgAABdvkl/FRgAAAFZJREFUeNpiYCAb1JfKEiX3/7U1Pj3I0rhEUAz+/9oan9VwRRCEXel/ZABTCrEaoeE/NoBmHuP////xBxMjIyMDAwMTkYHKCLEXv2FQdViVwlWQBgADAAQVSxWJUvzLAAAAAElFTkSuQmCC",
        "Fog": "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",
        "Hail": "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",
        "Moon": "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",
        "Moonish": "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",
        "Sleet": "iVBORw0KGgoAAAANSUhEUgAAAA0AAAANCAIAAAD9iXMrAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHgg/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl/AV/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAARKCBKrBBG/TBGCzABhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0HDYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofcn8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJgUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJzs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3vdy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfyl5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADqYAAAOpgAABdvkl/FRgAAAG5JREFUeNpiYCAOMCJzzp//D2EYGjLi1HH+/H84OH/+P1wPTkXIqgkrQlPNBFF64QJ2x8DFGdF8gAkQfhLwrkRWqjjtM7JmiCwUzJt3H81UTBEo+P//P5ob4CIMaBZhNQZZlgHZHXBjUFxGJAAMAC2ueJ4EUAd9AAAAAElFTkSuQmCC",
        "Squall": "iVBORw0KGgoAAAANSUhEUgAAAA0AAAANCAIAAAD9iXMrAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkIzRTZFNzJERDM3QTExRUJCREI3OEMyMTEwMUNGQkNEIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkIzRTZFNzJFRDM3QTExRUJCREI3OEMyMTEwMUNGQkNEIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6QjNFNkU3MkJEMzdBMTFFQkJEQjc4QzIxMTAxQ0ZCQ0QiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6QjNFNkU3MkNEMzdBMTFFQkJEQjc4QzIxMTAxQ0ZCQ0QiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz51BMoWAAAAYElEQVR42mJiIA4wkaOuubn5////mGzs4PDhw3A2XCkLRCuQdHBwsLGxATIYGRnh6oBsoDZbW1sCzkI3D2IYUDces4kzD2IAxAwgiWYMAffBvYwzaJCDjUD4URRvAAEGAEibMzC5039xAAAAAElFTkSuQmCC",
        "Tornado": "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",
    }

    # Calculate dimensions
    DAY_WIDTH = 20 * scale
    DIVIDER_WIDTH = scale
    TOTAL_WIDTH = (DAY_WIDTH * 3) + (DIVIDER_WIDTH * 2)
    HEIGHT = 32 * scale
    SUFFIX = "°" if scale == 2 else ""

    # Create columns first
    columns = []
    for i, day in enumerate(daily_data):
        # Get day abbreviation
        day_abbr = day["date"].format("Mon")[:3].upper()
        day_abbr = LANGUAGE_LOCALES[day_abbr][lang]

        # Create day column
        day_column = render.Column(
            expanded = True,
            main_align = "space_around",
            cross_align = "center",
            children = [
                # Weather icon
                render.Image(
                    src = base64.decode(WEATHER_ICONS.get(day["weather"], "")),
                    width = 12 * scale,
                    height = 12 * scale,
                ),
                # Day abbreviation
                render.Text(
                    day_abbr,
                    font = "CG-pixel-4x5-mono" if scale == 1 else "terminus-12",
                    color = "#FF0",
                ),
                # High temp
                render.Text(
                    "%d" % round_temp(day["high"]) + SUFFIX,
                    font = "CG-pixel-4x5-mono" if scale == 1 else "terminus-12",
                    color = "#FFF",
                ),
                # Low temp
                render.Text(
                    "%d" % round_temp(day["low"]) + SUFFIX,
                    font = "CG-pixel-4x5-mono" if scale == 1 else "terminus-12",
                    color = "#FFF",
                ),
            ],
        )

        columns.append(day_column)

        # Add divider if not last column
        if i < 2:
            columns.append(
                render.Box(
                    width = DIVIDER_WIDTH,
                    height = HEIGHT,
                    color = "#444",
                ),
            )

    # Create the display with ALL children at once
    weather_display = render.Root(
        child = render.Stack(
            children = [
                render.Box(
                    width = TOTAL_WIDTH,
                    height = HEIGHT,
                    color = "#000",
                ),
                render.Row(
                    expanded = True,
                    main_align = "space_evenly",
                    children = columns,
                ),
            ],
        ),
    )

    return weather_display

def error_display(message, scale = 1):
    return render.Root(
        child = render.Text(message, font = "tb-8" if scale == 1 else "terminus-12"),
    )

def get_schema():
    options = [
        schema.Option(
            display = "Fahrenheit",
            value = "imperial",
        ),
        schema.Option(
            display = "Celsius",
            value = "metric",
        ),
    ]

    return schema.Schema(
        version = "1",
        fields = [
            schema.Location(
                id = "location",
                name = "Location",
                desc = "Location for the display of the weather.",
                icon = "locationDot",
            ),
            schema.Toggle(
                id = "showthreeday",  # Add new toggle for display format
                name = "Show Three Day Forecast",
                desc = "Toggle between three day and single day display.",
                default = True,
                icon = "calendar",
            ),
            schema.Dropdown(
                id = "units",
                name = "Units",
                desc = "Display units.",
                default = options[0].value,
                options = options,
                icon = "calendar",
            ),
            schema.Text(
                id = "api_v3",
                name = "OpenWeather One Call API 3.0 Key (Optional)",
                desc = "One Call API 3.0 key for enhanced features. Requires 'One Call by Call' subscription with 1000 free calls/day.",
                icon = "gear",
            ),
            schema.Text(
                id = "api_v2",
                name = "OpenWeather API 2.5 Key",
                desc = "Standard API 2.5 key for basic weather data (free tier available). Go to OpenWeatherMap.org to get your free API key.",
                icon = "gear",
            ),
            schema.Dropdown(
                id = "lang",
                name = "Language",
                desc = "The language to display the information",
                icon = "language",
                default = "en",
                options = [
                    schema.Option(display = "Deutsch", value = "de"),
                    schema.Option(display = "English", value = "en"),
                ],
            ),
            schema.Text(
                id = "cache_mins",
                name = "Cache Duration",
                desc = "How long to cache weather data (in minutes)",
                icon = "clock",
                default = str(DEFAULT_CACHE_MINS),
            ),
        ],
    )
